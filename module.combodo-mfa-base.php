<?php
//
// iTop module definition file
//

SetupWebPage::AddModule(
	__FILE__, // Path to the current file, all other file names are relative to the directory containing this file
	'combodo-mfa-base/1.0.0',
	[
		// Identification
		//
		'label' => 'Multi-factor authentication base',
		'category' => 'authentication',

		// Setup
		//
		'dependencies' => [
			'combodo-my-account/1.0.0',
		],
		'mandatory' => true,
		'visible' => true,
		'installer' => 'MFABaseInstaller',

		// Components
		//
		'datamodel' => [
			'vendor/autoload.php',
			'src/Portal/Router/MfaBrickRouter.php',
			'model.combodo-mfa-base.php', // Contains the PHP code generated by the "compilation" of datamodel.combodo-mfa-base.xml
			'src/Hook/MFABaseLoginExtension.php',
			'src/Hook/PortalUIExtension.php',
		],
		'webservice' => [

		],
		'data.struct' => [
			// add your 'structure' definition XML files here,
		],
		'data.sample' => [
			// add your sample data XML files here,
		],

		// Documentation
		//
		'doc.manual_setup' => '', // hyperlink to manual setup documentation, if any
		'doc.more_information' => '', // hyperlink to more information, if any

		// Default settings
		//
		'settings' => [
			'enabled' => true,
			'allowed-login-types' => ['form', 'basic', 'url', 'external'],
		],
	]
);

if (! class_exists('MFABaseInstaller'))
{
// Module installation handler
// Don't forget 'installer' in AddModule() !!!
//
	class MFABaseInstaller extends ModuleInstallerAPI
	{
		/**
		 * Create missing entries in MFAMode for existing MFAUserSettings classes
		 *
		 * @param \Config $oConfiguration
		 * @param $sPreviousVersion
		 * @param $sCurrentVersion
		 *
		 * @throws \ArchivedObjectException
		 * @throws \CoreCannotSaveObjectException
		 * @throws \CoreException
		 * @throws \CoreUnexpectedValue
		 * @throws \CoreWarning
		 * @throws \MySQLException
		 * @throws \OQLException
		 */
		public static function AfterDataLoad(Config $oConfiguration, $sPreviousVersion, $sCurrentVersion)
		{
			$oSet = new DBObjectSet(DBSearch::FromOQL("SELECT MFAMode"));
			$aModes = [];
			while ($oMode = $oSet->Fetch()) {
				$aModes[] = $oMode->Get('name');
			}

			$aConfiguredMFAModes = MetaModel::EnumChildClasses(MFAUserSettings::class);
			$aSettings = [];
			foreach ($aConfiguredMFAModes as $sModeClass) {
				if (MetaModel::IsAbstract($sModeClass)) {
					continue;
				}
				if (in_array($sModeClass, $aModes)) {
					continue;
				}
				$aSettings[] = $sModeClass;
			}

			foreach ($aSettings as $sMode) {
				$oMode = MetaModel::NewObject(MFAMode::class, ['name' =>$sMode]);
				$oMode->DBInsert();
			}
		}
	}
}

